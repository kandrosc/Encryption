from PIL import Image, ImageFilter
import numpy as np

def shift(A,n):
    B=A[len(A)-n%256:]+A[:len(A)-n%256]
    return B

def decrypt(name,image,keyword,grid):
    pixels=image.load()
    c=[0]*3
    count=0
    for i in range(image.size[0]):
        for j in range(image.size[1]):
            red=pixels[i,j][0]
            green=pixels[i,j][1]
            blue=pixels[i,j][2]
            for k in range(len(grid)):
                red=grid[count%3][(red-c[count%3])%256]
                green=grid[count%3][(green-c[count%3])%256]
                blue=grid[count%3][(blue-c[count%3])%256]
                c[count%3]=c[count%3]+(ord(keyword[count])-96)
                #grid[count%3]=shift(grid[count%3],(ord(keyword[count])-96))
                count+=1
            pixels[i,j]=(red,green,blue)        
    image.show()

def encrypt(name,image,keyword,grid):
    pixels=image.load()
    c=[0]*3
    '''for i in range(len(keyword)):
        grid[i%3]=shift(grid[i%3],(ord(keyword[i])-96))'''
    for i in range(0,len(keyword),3):
        for j in range(3):
            c[j]=c[j]+ord(keyword[i+j])-96  

    count=len(keyword)-1
    for i in range(image.size[0]-1,-1,-1):
        for j in range(image.size[1]-1,-1,-1):
            red=pixels[i,j][0]
            green=pixels[i,j][1]
            blue=pixels[i,j][2]
            for k in range(len(grid)-1,-1,-1):
                #grid[count%3]=shift(grid[count%3],-(ord(keyword[count])-96))
                c[count%3]=c[count%3]-(ord(keyword[count])-96)
                red=(grid[count%3].index(red)+c[count%3])%256
                green=(grid[count%3].index(green)+c[count%3])%256
                blue=(grid[count%3].index(blue)+c[count%3])%256
                count-=1
            pixels[i,j]=(red,green,blue)
    image.show()
    image.save('encrypted_'+name[:len(name)-3]+'png')


def fixkeyword(keyword,image):
    size=image.size[0]*image.size[1]*3
    if size>len(keyword):
        while len(keyword)<=size:
            keyword=keyword+keyword
        keyword=keyword[:size]
        
    elif size<len(keyword):
        keyword=keyword[:size]
    return keyword

def makeGrid():
    grid=[]
    grid.append([101, 122, 47, 210, 21, 78, 160, 51, 128, 53, 27, 142, 73, 226, 114, 145, 194, 243, 202, 254, 244, 191, 43, 182, 104, 144, 224, 157, 112, 99, 54, 228, 179, 89, 154, 227, 158, 172, 40, 93, 187, 131, 153, 138, 206, 97, 140, 146, 188, 20, 9, 177, 170, 253, 30, 143, 29, 200, 129, 218, 232, 48, 42, 49, 178, 57, 189, 100, 110, 137, 151, 116, 141, 163, 185, 33, 166, 95, 121, 34, 90, 56, 155, 70, 105, 132, 68, 123, 80, 219, 117, 231, 150, 196, 124, 212, 108, 72, 167, 74, 60, 126, 65, 234, 181, 46, 94, 82, 133, 127, 61, 249, 125, 216, 62, 162, 217, 1, 109, 36, 87, 148, 186, 165, 25, 237, 111, 69, 6, 134, 159, 135, 98, 240, 255, 63, 208, 15, 198, 195, 28, 2, 190, 248, 213, 205, 77, 201, 204, 207, 193, 118, 149, 130, 14, 173, 113, 58, 245, 171, 223, 238, 79, 83, 199, 119, 92, 176, 156, 236, 250, 175, 10, 220, 235, 180, 88, 4, 164, 215, 39, 251, 5, 35, 247, 168, 71, 7, 96, 252, 174, 44, 31, 136, 241, 222, 76, 45, 37, 85, 0, 169, 197, 59, 161, 91, 50, 209, 55, 84, 13, 23, 64, 41, 239, 18, 103, 242, 139, 26, 225, 106, 52, 120, 3, 211, 32, 229, 12, 192, 16, 184, 17, 107, 81, 66, 246, 230, 11, 75, 8, 203, 183, 233, 67, 221, 102, 19, 86, 152, 38, 147, 22, 214, 115, 24])
    
    grid.append([34, 5, 207, 114, 19, 65, 42, 145, 79, 227, 127, 2, 44, 14, 183, 20, 211, 136, 209, 107, 47, 98, 249, 54, 164, 21, 73, 134, 76, 11, 113, 81, 86, 190, 33, 152, 75, 93, 179, 57, 52, 123, 181, 244, 161, 247, 106, 239, 116, 22, 180, 61, 235, 142, 222, 115, 70, 151, 185, 156, 245, 177, 1, 197, 9, 206, 16, 188, 147, 171, 0, 216, 167, 182, 53, 83, 3, 250, 131, 213, 234, 108, 163, 198, 64, 130, 17, 187, 103, 59, 157, 39, 119, 138, 233, 84, 110, 212, 195, 232, 105, 141, 159, 231, 241, 226, 102, 224, 122, 193, 153, 128, 132, 101, 82, 221, 210, 175, 46, 13, 140, 50, 120, 223, 112, 80, 172, 150, 37, 253, 220, 92, 27, 90, 203, 204, 160, 109, 30, 88, 173, 124, 118, 63, 186, 168, 236, 48, 28, 23, 202, 4, 199, 162, 229, 126, 41, 148, 96, 97, 243, 217, 158, 146, 240, 165, 144, 143, 125, 189, 74, 25, 100, 99, 215, 196, 129, 121, 12, 29, 89, 104, 254, 139, 184, 208, 252, 214, 8, 205, 95, 77, 192, 62, 60, 72, 31, 176, 40, 67, 149, 51, 36, 10, 7, 201, 200, 58, 24, 255, 56, 45, 18, 174, 68, 218, 219, 135, 35, 91, 246, 78, 49, 6, 69, 38, 43, 242, 85, 94, 238, 166, 133, 178, 71, 228, 225, 154, 26, 191, 169, 170, 15, 230, 87, 137, 66, 248, 155, 32, 251, 111, 237, 117, 55, 194])
    
    grid.append([153, 139, 118, 243, 79, 24, 143, 126, 210, 128, 242, 174, 49, 105, 14, 110, 251, 177, 146, 244, 90, 230, 205, 173, 163, 57, 144, 40, 44, 98, 162, 46, 138, 253, 76, 12, 190, 161, 195, 154, 240, 108, 82, 53, 189, 35, 185, 27, 122, 50, 9, 133, 255, 71, 142, 70, 137, 13, 62, 109, 180, 34, 167, 74, 225, 158, 194, 66, 7, 191, 15, 68, 200, 150, 159, 198, 175, 224, 252, 182, 106, 211, 91, 216, 214, 135, 88, 206, 145, 63, 140, 193, 103, 43, 92, 246, 226, 31, 188, 123, 196, 165, 0, 201, 99, 80, 2, 192, 47, 172, 129, 75, 11, 249, 221, 208, 127, 207, 245, 160, 77, 124, 102, 184, 84, 236, 130, 186, 213, 181, 232, 59, 132, 120, 237, 234, 156, 1, 67, 19, 229, 38, 233, 17, 86, 30, 141, 26, 117, 254, 22, 178, 23, 131, 136, 227, 6, 104, 125, 218, 247, 65, 155, 45, 95, 199, 222, 100, 83, 187, 197, 29, 209, 64, 56, 149, 87, 151, 85, 61, 157, 73, 37, 147, 235, 25, 94, 169, 58, 21, 228, 18, 101, 112, 238, 116, 97, 241, 203, 48, 72, 33, 5, 54, 32, 78, 215, 55, 39, 36, 202, 179, 183, 42, 248, 89, 204, 148, 170, 81, 60, 20, 8, 41, 231, 134, 16, 176, 223, 113, 250, 171, 212, 217, 10, 52, 219, 239, 119, 220, 111, 164, 51, 93, 168, 69, 3, 152, 121, 114, 96, 107, 115, 28, 4, 166]
)
    
    return grid
  
def main():
    grid=makeGrid()
    name=input('Enter image name: ')
    image=Image.open(name)
    keyword=input("Enter a keyword: ")
    keyword=fixkeyword(keyword,image)
    switch=input("Type e to encrypt, type d to decrypt: ")
    
    if switch=='e':
        encrypt(name,image,keyword,grid)
    elif switch=='d':
        decrypt(name,image,keyword,grid)
    
    
main()